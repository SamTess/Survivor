# Build stage
FROM node:20-alpine AS builder

RUN apk add --no-cache libc6-compat

WORKDIR /app

COPY package*.json ./

RUN npm ci --prefer-offline --no-audit --production=false && npm cache clean --force

COPY prisma ./prisma/
RUN npx prisma generate

COPY . .

ARG DATABASE_URL
ARG NODE_ENV=production
ARG NEXT_TELEMETRY_DISABLED=1

ENV DATABASE_URL=$DATABASE_URL
ENV NODE_ENV=$NODE_ENV
ENV NEXT_TELEMETRY_DISABLED=$NEXT_TELEMETRY_DISABLED

RUN npm run build

# Production stage
FROM node:20-alpine AS runner

RUN apk add --no-cache netcat-openbsd curl

WORKDIR /app

RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

COPY package*.json ./

RUN npm ci --prefer-offline --no-audit --omit=dev && npm cache clean --force

COPY --from=builder /app/prisma ./prisma/
RUN npx prisma generate

COPY --from=builder --chown=nextjs:nodejs /app/.next ./.next
COPY --from=builder /app/public ./public

COPY --chown=nextjs:nodejs Docker/.env .env
COPY --chown=nextjs:nodejs scripts/start-prod.sh ./scripts/start-prod.sh

RUN chmod +x ./scripts/start-prod.sh

USER nextjs

EXPOSE 3000

CMD ["./scripts/start-prod.sh"]
