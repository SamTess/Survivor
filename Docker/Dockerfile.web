# Build stage
FROM node:20-alpine AS builder

RUN apk add --no-cache libc6-compat

WORKDIR /app

COPY package*.json ./

RUN npm ci --prefer-offline --no-audit

COPY prisma ./prisma/
RUN npx prisma generate

COPY . .

ARG DATABASE_URL
ARG NODE_ENV=production
ARG NEXT_TELEMETRY_DISABLED=1

ENV DATABASE_URL=$DATABASE_URL
ENV NODE_ENV=$NODE_ENV
ENV NEXT_TELEMETRY_DISABLED=$NEXT_TELEMETRY_DISABLED

RUN npm run build
RUN npm run docs:generate

# Production stage
FROM node:20-alpine AS runner

RUN apk add --no-cache curl ffmpeg imagemagick

WORKDIR /app

RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

COPY package*.json ./

COPY --from=builder /app/node_modules ./node_modules

COPY --from=builder /app/prisma ./prisma/

COPY --from=builder --chown=nextjs:nodejs /app/.next ./.next
COPY --from=builder /app/public ./public
COPY --from=builder /app/docs/api ./docs/api

COPY --chown=nextjs:nodejs Docker/.env .env
COPY --chown=nextjs:nodejs scripts ./scripts

RUN mkdir -p /app/uploads/media && chown -R nextjs:nodejs /app/uploads

RUN chmod +x ./scripts/start-prod.sh ./scripts/docs-watch.sh

USER nextjs

EXPOSE 3000
EXPOSE 8080

CMD ["./scripts/start-prod.sh"]