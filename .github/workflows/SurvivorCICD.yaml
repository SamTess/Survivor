name: SurvivorActions

on:
  push:
    branches-ignore:
      - 'ga-ignore-*'
      - 'HEAD'

  pull_request:
    branches-ignore:
      - 'ga-ignore-*'
      - 'HEAD'

env:
  MIRROR_URL:
  GITHUB_URL:

jobs:
  cancel-if-mirror:
    name: Cancel if repository is the mirror
    runs-on: ubuntu-latest
    outputs:
      should_cancel: ${{ steps.check-repo-url.outputs.should_cancel }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - id: check-repo-url
        name: Check repository URL
        run: |
          REPO_URL=$(git config --get remote.origin.url)

          # Normalize URLs by removing any trailing `.git`
          REPO_URL=${REPO_URL%.git}
          MIRROR_URL=${MIRROR_URL%.git}

          if [ "$REPO_URL" == "$MIRROR_URL" ]; then
            echo "Repository URL matches the mirror URL. Skipping further jobs."
            echo "should_cancel=true" >> "$GITHUB_OUTPUT"
          else
            echo "Repository URL does not match the mirror URL. Proceeding with other jobs."
            echo "should_cancel=false" >> "$GITHUB_OUTPUT"
          fi

  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    needs: [cancel-if-mirror]
    if: needs.cancel-if-mirror.outputs.should_cancel == 'false'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Check TypeScript types
        run: npx tsc --noEmit

  docker-integration-test:
    name: Docker Integration Test
    runs-on: ubuntu-latest
    needs: [cancel-if-mirror, lint]
    if: needs.cancel-if-mirror.outputs.should_cancel == 'false'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.24.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      - name: Create .env file for testing
        env:
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          NEXT_PUBLIC_APP_URL: ${{ secrets.NEXT_PUBLIC_APP_URL }}
          NODE_ENV: ${{ secrets.NODE_ENV }}
        run: |
          cd Docker/
          # Valeurs par défaut si certains secrets manquent (ex: DB_USER)
          : "${DB_USER:=postgres}"
          : "${DB_PORT:=5432}"
          : "${DB_NAME:=app}"
          if [ -z "${DB_PASSWORD}" ]; then
            echo "DB_PASSWORD manquant (secret)." >&2
            exit 1
          fi
          # Reconstruit DATABASE_URL de manière fiable (évite ordre env)
          DATABASE_URL="postgresql://${DB_USER}:${DB_PASSWORD}@${DB_HOST:-localhost}:${DB_PORT}/${DB_NAME}"
          cat > .env << EOF
          DB_HOST=${DB_HOST}
          DB_PORT=${DB_PORT}
          DB_NAME=${DB_NAME}
          DB_USER=${DB_USER}
          DB_PASSWORD=${DB_PASSWORD}
          DATABASE_URL=${DATABASE_URL}
          NEXT_PUBLIC_APP_URL=${NEXT_PUBLIC_APP_URL}
          NODE_ENV=${NODE_ENV}
          EOF

          echo ".env file created successfully"
          echo "Sanity check (password masqué):"
          grep -E '^(DB_HOST|DB_PORT|DB_NAME|DB_USER|NODE_ENV|NEXT_PUBLIC_APP_URL)=' .env || true
          echo "DATABASE_URL user=$(echo "$DATABASE_URL" | sed -E 's#postgresql://([^:]+):.*@.*#\1#') host=$(echo "$DATABASE_URL" | sed -E 's#.*@([^:/]+).*#\1#')"

      - name: Validate environment variables
        run: |
          cd Docker
          if ! grep -q '^DB_USER=postgres' .env; then
            echo "Avertissement: DB_USER n'est pas 'postgres'. Vérifiez que l'utilisateur existe dans l'image Postgres de test."
          fi
          if grep -q '^DB_USER=root' .env; then
            echo "Erreur: DB_USER=root provoquera l'échec (role root inexistant)." >&2
            exit 1
          fi
          if ! grep -q '^DATABASE_URL=postgresql://' .env; then
            echo "DATABASE_URL incorrect ou manquant" >&2
            exit 1
          fi
          echo "Validation variables: OK"

      - name: Build and start production containers
        run: |
          cd Docker
          echo "Starting production containers..."
          docker-compose -f docker-compose.prod.yml up --build -d
          echo "Containers started, checking status..."
          docker-compose -f docker-compose.prod.yml ps

      - name: Wait for services to be ready
        run: |
          echo "Waiting for database container to be running..."
          cd Docker
          export $(cat .env | xargs)

          timeout 30 bash -c '
            until [ "$(docker-compose -f docker-compose.prod.yml ps -q db)" ]; do
              echo "db container not created yet, waiting..."
              sleep 2
            done
            CID=$(docker-compose -f docker-compose.prod.yml ps -q db)

            STATE=$(docker inspect -f "{{.State.Status}}" $CID 2>/dev/null || echo "unknown")
            if [ "$STATE" = "exited" ] || [ "$STATE" = "dead" ] || [ "$STATE" = "created" ]; then
              echo "db container created but in terminal state: $STATE"
              echo "==== Container inspect ===="
              docker inspect $CID || true
              echo "==== Container logs ===="
              docker logs $CID || true
              exit 1
            fi

            restart_count=0
            until [ "$(docker inspect -f "{{.State.Running}}" $CID)" = "true" ]; do
              CUR=$(docker inspect -f "{{.State.Status}}" $CID 2>/dev/null || echo "unknown")
              echo "db container present but not running yet (state: $CUR)..."
              docker-compose -f docker-compose.prod.yml ps -a || true
              sleep 2
              if [ "$CUR" = "exited" ] || [ "$CUR" = "dead" ]; then
                echo "db container entered terminal state: $CUR"
                echo "==== Container inspect ===="
                docker inspect $CID || true
                echo "==== Container logs ===="
                docker logs $CID || true
                exit 1
              fi
              if [ "$CUR" = "restarting" ]; then
                restart_count=$((restart_count+1))
                echo "db container is restarting (count: $restart_count)."
                if [ $restart_count -ge 4 ]; then
                  echo "db container restarted too many times, dumping logs and failing"
                  echo "==== Container inspect ===="
                  docker inspect $CID || true
                  echo "==== Container logs ===="
                  docker logs $CID || true
                  exit 1
                fi
              fi
            done
          '
          echo "db container is running; checking PostgreSQL readiness inside container..."

          timeout 30 bash -c '
            until docker-compose -f docker-compose.prod.yml exec -T db sh -c "pg_isready -q"; do
              echo "Postgres not ready yet, waiting..."
              sleep 2
            done
          '
          echo "Postgres reports it is ready"

          echo "Waiting for web application to respond on http://localhost:3000 ..."
          timeout 30 bash -c 'until curl -f http://localhost:3000 > /dev/null 2>&1; do echo "Web app not ready, waiting..."; sleep 2; done'
          echo "Web application is ready!"

      - name: Run Prisma migrations (or push schema)
        run: |
          echo "Applying Prisma migrations..."
          cd Docker
          export $(cat .env | xargs)
          set -e
          HAS_MIGRATIONS=$(docker-compose -f docker-compose.prod.yml exec -T web sh -c 'ls -1 prisma/migrations 2>/dev/null | grep -v "^$" || true' | wc -l | tr -d '[:space:]')
          if [ "$HAS_MIGRATIONS" -gt 0 ]; then
            echo "Migrations détectées ($HAS_MIGRATIONS dossiers) -> prisma migrate deploy"
            docker-compose -f docker-compose.prod.yml exec -T web npx prisma migrate deploy
          else
            echo "Aucune migration versionnée détectée -> prisma db push"
            docker-compose -f docker-compose.prod.yml exec -T web npx prisma db push
          fi
          echo "Etat des tables après synchronisation:" \
            && docker-compose -f docker-compose.prod.yml exec -T db psql -U "${DB_USER}" -d "${DB_NAME}" -c "SELECT table_name FROM information_schema.tables WHERE table_schema='public' ORDER BY 1;"

      - name: Test database connection and schema
        run: |
          echo "Testing database connection and checking tables..."
          cd Docker
          export $(cat .env | xargs)
          EXPECTED=$(docker-compose -f docker-compose.prod.yml exec -T web sh -c "grep -E '^model ' prisma/schema.prisma | wc -l" | tr -d '[:space:]')
          echo "Expected Prisma models: $EXPECTED"
          COUNT=$(docker-compose -f docker-compose.prod.yml exec -T db psql -t -A -U "$DB_USER" -d "$DB_NAME" -c "SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = 'public';" | tr -d '[:space:]')
          echo "Actual table count: $COUNT"
          if [ "$COUNT" -lt "$EXPECTED" ]; then
            echo "Table count ($COUNT) < expected models ($EXPECTED) => échec" >&2
            echo "Listing current tables:" >&2
            docker-compose -f docker-compose.prod.yml exec -T db psql -U "$DB_USER" -d "$DB_NAME" -c "SELECT table_name FROM information_schema.tables WHERE table_schema='public' ORDER BY 1;" >&2 || true
            exit 1
          fi

          echo "Testing specific table exists..."
          docker-compose -f docker-compose.prod.yml exec -T db psql -t -A -U "$DB_USER" -d "$DB_NAME" -c "
            SELECT 1
            FROM information_schema.tables
            WHERE table_schema = 'public' AND lower(table_name) = 's_user'
            LIMIT 1;
          " | grep -q "1"
          echo "Table s_user trouvée"

      - name: Test web application health
        run: |
          echo "Testing web application response..."
          response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000)
          if [ "$response" != "200" ]; then
            echo "Web application health check failed. HTTP status: $response"
            exit 1
          fi
          echo "Web application is responding correctly (HTTP 200)"

      - name: Test database connection from web app
        run: |
          echo "Testing if web app can connect to database..."
          cd Docker
          export $(cat .env | xargs)
          logs=$(docker-compose -f docker-compose.prod.yml logs web 2>&1)
          if echo "$logs" | grep -i "database.*error\|connection.*failed\|econnrefused"; then
            echo "Database connection errors found in web app logs:"
            echo "$logs"
            exit 1
          fi
          echo "No database connection errors found in web app logs"

      - name: Show service status
        if: always()
        run: |
          echo "=== Container Status ==="
          cd Docker
          export $(cat .env | xargs)
          docker-compose -f docker-compose.prod.yml ps
          echo ""
          echo "=== Web App Logs ==="
          docker-compose -f docker-compose.prod.yml logs web
          echo ""
          echo "=== Database Logs ==="
          docker-compose -f docker-compose.prod.yml logs db

      - name: Cleanup
        if: always()
        run: |
          cd Docker
          export $(cat .env | xargs)
          docker-compose -f docker-compose.prod.yml down -v

  push_to_mirror:
    name: Pushing to good repository
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [docker-integration-test]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Push to mirror repository
        uses: pixta-dev/repository-mirroring-action@v1.1.1
        with:
          target_repo_url: ${{ env.GITHUB_URL }}
          ssh_private_key: ${{ secrets.GIT_SSH_PRIVATE_KEY }}
