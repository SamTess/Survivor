datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------
// Opportunities Tracker Models
// --------------------

enum OpportunityDirection {
  S_TO_I
  S_TO_P
  I_TO_S
  P_TO_S
}

enum EntityType {
  STARTUP
  INVESTOR
  PARTNER
}

enum OpportunityStatus {
  NEW
  QUALIFIED
  CONTACTED
  IN_DISCUSSION
  PILOT
  DEAL
  LOST
}

enum OpportunityEventType {
  AUTO_CREATED
  RESCORED
  STATUS_CHANGED
  NOTE
  EMAIL_SENT
  MEETING
  PILOT_STARTED
  DEAL_SIGNED
}

model OPPORTUNITY {
  id             String              @id @default(uuid())
  direction      OpportunityDirection
  source_type    EntityType
  source_id      Int
  target_type    EntityType
  target_id      Int
  score          Decimal?            @db.Decimal(5, 2)
  score_breakdown Json?
  status         OpportunityStatus   @default(NEW)
  reason         String?
  next_action    String?
  owner_user_id  Int?
  created_at     DateTime            @default(now())
  updated_at     DateTime            @updatedAt

  events OPPORTUNITY_EVENT[]

  @@index([status])
  @@index([direction])
  @@unique([direction, source_type, source_id, target_type, target_id])
}

model OPPORTUNITY_EVENT {
  id             String                 @id @default(uuid())
  opportunity_id String
  occurred_at    DateTime               @default(now())
  type           OpportunityEventType
  payload        Json?

  opportunity OPPORTUNITY @relation(fields: [opportunity_id], references: [id], onDelete: Cascade)

  @@index([occurred_at])
  @@index([type])
}

model S_STARTUP {
  id           Int      @id @default(autoincrement())
  name         String
  legal_status String
  address      String
  phone        String
  sector       String
  maturity     String
  email        String
  description  String
  image_data   Bytes?
  created_at   DateTime @default(now())
  details      S_STARTUP_DETAIL[]
  founders     S_FOUNDER[]
  news         S_NEWS[]
  viewsCount     Int      @default(0)
  likesCount     Int      @default(0)
  bookmarksCount Int      @default(0)
  sharesCount    Int      @default(0)
  followersCount Int      @default(0)
}

model S_STARTUP_DETAIL {
  id              Int      @id @default(autoincrement())
  startup_id      Int
  description     String?
  website_url     String?
  social_media_url String?
  project_status  String?
  needs           String?
  startup         S_STARTUP @relation(fields: [startup_id], references: [id], onDelete: Cascade)
}

model S_USER {
  id            Int      @id @default(autoincrement())
  name          String
  email         String   @unique
  password_hash String
  address       String?
  phone         String?
  legal_status  String?
  description   String?
  image_data    Bytes?
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  role          String
  founders      S_FOUNDER[]
  investors     S_INVESTOR[]
  partners      S_PARTNER[]
  permissions   S_PERMISSION[]
  messages      S_MESSAGE[] @relation("SenderMessages")
  conversation_users S_CONVERSATION_USER[]
  message_reactions S_MESSAGE_REACTION[]
  sessions      S_SESSION[]
  interactionEvents S_INTERACTION_EVENT[]
  follows       S_FOLLOW[]
  likes         S_LIKE[]
  bookmarks     S_BOOKMARK[]
  pageViews     S_PAGE_VIEW[]
  passwordResets S_PASSWORD_RESET[]
  followersCount Int      @default(0)
  roles         S_USER_ROLE[]
}

model S_FOUNDER {
  id         Int      @id @default(autoincrement())
  startup_id Int
  user_id    Int?
  startup    S_STARTUP @relation(fields: [startup_id], references: [id], onDelete: Cascade)
  user       S_USER?   @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model S_INVESTOR {
  id               Int      @id @default(autoincrement())
  name             String
  legal_status     String
  address          String
  email            String   @unique
  phone            String
  description      String
  investor_type    String?
  investment_focus String?
  user_id          Int?
  user             S_USER?  @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id])
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt
  @@index([investor_type])
  @@index([investment_focus])
}

model S_PARTNER {
  id               Int      @id @default(autoincrement())
  name             String
  legal_status     String
  address          String
  email            String   @unique
  phone            String
  description      String
  partnership_type String?
  user_id          Int
  user             S_USER @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id])
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt
  @@index([partnership_type])
}

model S_NEWS {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  image_data  Bytes?
  startup_id  Int
  news_date   DateTime?
  location    String?
  category    String?
  created_at  DateTime @default(now())
  startup     S_STARTUP @relation(fields: [startup_id], references: [id], onDelete: Cascade)
  viewsCount     Int      @default(0)
  likesCount     Int      @default(0)
  bookmarksCount Int      @default(0)
  sharesCount    Int      @default(0)
}

model S_EVENT {
  id             Int      @id @default(autoincrement())
  name           String
  description    String?
  image_data     Bytes?
  dates          DateTime?
  location       String?
  event_type     String?
  target_audience String?
  created_at     DateTime @default(now())
  viewsCount     Int      @default(0)
  likesCount     Int      @default(0)
  bookmarksCount Int      @default(0)
  sharesCount    Int      @default(0)
  attendeesCount Int      @default(0)
}

model S_ROLES_REF {
  id        Int      @id @default(autoincrement())
  role_name String   @unique
  description String?
}

model S_PERMISSION {
  id         Int      @id @default(autoincrement())
  name       String
  description String?
  can_create Boolean  @default(false)
  can_read   Boolean  @default(false)
  can_update Boolean  @default(false)
  can_delete Boolean  @default(false)
  created_at DateTime @default(now())
  user_id    Int
  user       S_USER @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model S_CONVERSATION {
  id         Int      @id @default(autoincrement())
  name       String?
  created_at DateTime @default(now())
  users      S_CONVERSATION_USER[]
  messages   S_MESSAGE[]
}

model S_CONVERSATION_USER {
  conversation_id Int
  user_id        Int
  conversation   S_CONVERSATION @relation(fields: [conversation_id], references: [id], onDelete: Cascade)
  user           S_USER         @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@id([conversation_id, user_id])
}

model S_MESSAGE {
  id              Int      @id @default(autoincrement())
  conversation_id Int
  sender_id       Int
  content         String
  sent_at         DateTime @default(now())
  conversation    S_CONVERSATION @relation(fields: [conversation_id], references: [id], onDelete: Cascade)
  sender          S_USER         @relation("SenderMessages", fields: [sender_id], references: [id], onDelete: Cascade)
  reactions       S_MESSAGE_REACTION[]
}

model S_MESSAGE_REACTION {
  id         Int      @id @default(autoincrement())
  message_id Int
  user_id    Int
  emoji      String
  created_at DateTime @default(now())

  message    S_MESSAGE @relation(fields: [message_id], references: [id], onDelete: Cascade)
  user       S_USER    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([message_id, user_id, emoji])
  @@index([message_id])
  @@index([user_id])
}

enum ContentType {
  USER
  STARTUP
  EVENT
  NEWS
  PAGE
}

enum EventType {
  VIEW
  CLICK
  LIKE
  UNLIKE
  BOOKMARK
  SHARE
  FOLLOW
  UNFOLLOW
  SIGNUP
  LOGIN
  COMMENT
}

model S_SESSION {
  id           String      @id @default(uuid())
  occurredAt   DateTime    @default(now())
  userId       Int?
  contentType  ContentType
  contentId    Int?
  metadata     Json?
  ipHash       String?
  userAgent    String?

  referrerHost String?
  utmSource    String?
  utmMedium    String?
  utmCampaign  String?
  utmTerm      String?
  utmContent   String?

  user              S_USER?           @relation(fields: [userId], references: [id])
  interactionEvents S_INTERACTION_EVENT[]
  pageViews         S_PAGE_VIEW[]

  @@index([occurredAt])
  @@index([userId])
  @@index([contentType])
  @@index([contentType, contentId, occurredAt])
  @@index([utmSource, utmCampaign, occurredAt])
}

model S_INTERACTION_EVENT {
  id           String      @id @default(uuid())
  occurredAt   DateTime    @default(now())
  userId       Int?
  sessionId    String?
  eventType    EventType
  contentType  ContentType
  contentId    Int?
  metadata     Json?
  ipHash       String?
  userAgent    String?

  referrerHost String?
  utmSource    String?
  utmMedium    String?
  utmCampaign  String?
  utmTerm      String?
  utmContent   String?

  user    S_USER?  @relation(fields: [userId], references: [id])
  session S_SESSION? @relation(fields: [sessionId], references: [id])

  @@index([occurredAt])
  @@index([userId])
  @@index([sessionId])
  @@index([eventType])
  @@index([contentType])
  @@index([contentId])
  @@index([contentType, contentId, eventType, occurredAt])
  @@index([utmSource, utmCampaign, occurredAt])
}

model S_FOLLOW {
  followerId  Int
  targetType  ContentType
  targetId    Int
  createdAt   DateTime @default(now())

  follower    S_USER   @relation(fields: [followerId], references: [id])

  @@id([followerId, targetType, targetId])
  @@index([targetType, targetId])
}

model S_LIKE {
  userId      Int
  contentType ContentType
  contentId   Int
  createdAt   DateTime @default(now())

  user        S_USER @relation(fields: [userId], references: [id])

  @@id([userId, contentType, contentId])
  @@index([contentType, contentId])
}

model S_BOOKMARK {
  userId      Int
  contentType ContentType
  contentId   Int
  createdAt   DateTime @default(now())

  user        S_USER @relation(fields: [userId], references: [id])

  @@id([userId, contentType, contentId])
  @@index([contentType, contentId])
}

model S_DAILY_CONTENT_METRICS {
  id String @id @default(uuid())
  day DateTime
  contentType ContentType
  contentId Int
  views Int @default(0)
  uniqueUsers Int @default(0)
  clicks Int @default(0)
  likes Int @default(0)
  bookmarks Int @default(0)
  shares Int @default(0)
  followers Int @default(0)


  @@unique([day, contentType, contentId])
  @@index([day])
  @@index([contentType])
  @@index([contentId])
}

model S_PAGE_VIEW {
  id String @id @default(uuid())
  occurredAt DateTime @default(now())
  sessionId String?
  userId Int?
  path String
  referrerHost String?
  utmSource String?
  utmMedium String?
  utmCampaign String?


  session S_SESSION? @relation(fields: [sessionId], references: [id])
  user S_USER? @relation(fields: [userId], references: [id])


  @@index([occurredAt])
  @@index([sessionId])
  @@index([userId])
  @@index([path])
  @@index([path, occurredAt])
}

model S_DAILY_ACQUISITION_METRICS {
  id String @id @default(uuid())
  day DateTime
  utmSource String?
  utmMedium String?
  utmCampaign String?
  sessions Int @default(0)
  users Int @default(0)
  signups Int @default(0)


  @@index([day])
  @@index([utmSource, utmCampaign, day])
  @@unique([day, utmSource, utmMedium, utmCampaign])
}

model S_PASSWORD_RESET {
  id         Int      @id @default(autoincrement())
  user_id    Int
  token      String   @unique
  expires_at DateTime
  used       Boolean  @default(false)
  created_at DateTime @default(now())
  user       S_USER   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([expires_at])
}

model S_USER_ROLE {
  user_id     Int
  role        String
  assigned_at DateTime @default(now())
  user        S_USER   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@id([user_id, role])
  @@index([role])
}